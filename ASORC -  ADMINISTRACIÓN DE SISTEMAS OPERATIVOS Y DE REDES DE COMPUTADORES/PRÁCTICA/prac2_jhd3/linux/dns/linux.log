Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:    """Return an IResourceProvider for the named module or requirement"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Does the package's distribution contain the named metadata?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """The named metadata resource as a string"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Yield named metadata resource as list of non-blank non-comment lines
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named metadata a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Execute the named script in the supplied namespace dictionary"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Does the package contain the named resource?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named resource a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Does the named resource exist?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named resource an existing directory?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        """List the contents of the named resource directory"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:        is the name it will be renamed to by the caller after this routine
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:    named "Python-Eggs".
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:    manifest_mod = collections.namedtuple('manifest_mod', 'manifest mtime')
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:    """Ensure that named package includes a subpath of path_item (if needed)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:            # Use pop() in a parse action to remove named result (note that corresponding value is not
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:        Returns named result matching the given key, or if there is no
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:        Returns the named parse results as a nested dictionary.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/__init__.py:accessed as a nested list, a dictionary, or an object with named
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = False
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = False
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = False
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``warn_multiple_tokens_in_named_alternation`` - flag to enable warnings when a results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``warn_ungrouped_named_tokens_in_collection`` - flag to enable warnings when a results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``enable_debug_on_named_expressions`` - flag to auto-enable debug on all subsequent
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = 0
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = 1
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = 7
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        to add, update, or remove any named results. If the tokens are modified in place,
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        if __diag__.enable_debug_on_named_expressions:
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    from the input string and the following named results:
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    If the given regex contains named groups (defined using ``(?P<name>...)``),
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    these will be preserved as named :class:`ParseResults`.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # named fields in a regex will be returned as named results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # we keep any named results that were defined in the FollowedBy expression
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # access named fields as dict entries, or output as dict
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    generating railroad diagram with named subdiagrams.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:        # clear list contents, but keep any named results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    pattern can include named results, so that the :class:`Dict` results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    can include named token fields.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    matchExpr.suppress_warning(Diagnostics.warn_ungrouped_named_tokens_in_collection)
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:            # also accessible as named results
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        #: The index of the next unnamed element
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index: int = 1
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:    def generate_unnamed(self) -> int:
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        Generate a number used in the name of an otherwise unnamed diagram
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index += 1
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        return self.unnamed_index
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        # Skip unnamed "Empty" elements
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:        Obtain available named resources for this virtual package.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:        Obtain a File-like for a named resource.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:    Handle to a named resource in a ResourceReader.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/abc.py:        """Return True if the named 'path' is a resource.
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/jaraco/functools.py:    Return a function that will call a named method on the
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/jaraco/functools.py:    args_and_kwargs = collections.namedtuple('args_and_kwargs', 'args kwargs')
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/packaging/version.py:_Version = collections.namedtuple(
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:# On older versions of typing there is an internal class named "Final".
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:        nm_tpl = collections.namedtuple(name, fields,
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    _prohibited_namedtuple_fields = typing._prohibited
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                    raise TypeError(f"Non-default namedtuple field {field_name} "
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:            # update from user namespace without overriding special namedtuple attributes
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                if key in _prohibited_namedtuple_fields:
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                elif key not in _special_namedtuple_fields and key not in nm_tpl._fields:
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    def _namedtuple_mro_entries(bases):
Desktop/easycab/venv/lib/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    NamedTuple.__mro_entries__ = _namedtuple_mro_entries
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/command/editable_wheel.py:New or renamed files may not be automatically picked up without a new installation.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/command/sdist.py:        """Read the manifest file (named by 'self.manifest') and use it to
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/command/egg_info.py:        named by 'self.manifest'.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/command/build.py:    For example, if a distribution wants to provide a Python module named ``pkg.mod``,
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/command/bdist_egg.py:    zip file will be named 'base_dir' + ".zip".  Uses either the "zipfile"
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:            # Use pop() in a parse action to remove named result (note that corresponding value is not
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:        Returns named result matching the given key, or if there is no
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:        Returns the named parse results as a nested dictionary.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/__init__.py:accessed as a nested list, a dictionary, or an object with named
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = False
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = False
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = False
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``warn_multiple_tokens_in_named_alternation`` - flag to enable warnings when a results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``warn_ungrouped_named_tokens_in_collection`` - flag to enable warnings when a results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``enable_debug_on_named_expressions`` - flag to auto-enable debug on all subsequent
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = 0
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = 1
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = 7
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        to add, update, or remove any named results. If the tokens are modified in place,
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        if __diag__.enable_debug_on_named_expressions:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    from the input string and the following named results:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    If the given regex contains named groups (defined using ``(?P<name>...)``),
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    these will be preserved as named :class:`ParseResults`.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # named fields in a regex will be returned as named results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # we keep any named results that were defined in the FollowedBy expression
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # access named fields as dict entries, or output as dict
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    generating railroad diagram with named subdiagrams.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:        # clear list contents, but keep any named results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    pattern can include named results, so that the :class:`Dict` results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    can include named token fields.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    matchExpr.suppress_warning(Diagnostics.warn_ungrouped_named_tokens_in_collection)
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:            # also accessible as named results
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        #: The index of the next unnamed element
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index: int = 1
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:    def generate_unnamed(self) -> int:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        Generate a number used in the name of an otherwise unnamed diagram
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index += 1
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        return self.unnamed_index
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        # Skip unnamed "Empty" elements
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:        Obtain available named resources for this virtual package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:        Obtain a File-like for a named resource.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:    Handle to a named resource in a ResourceReader.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_resources/abc.py:        """Return True if the named 'path' is a resource.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/jaraco/functools.py:    Return a function that will call a named method on the
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/jaraco/functools.py:    args_and_kwargs = collections.namedtuple('args_and_kwargs', 'args kwargs')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/packaging/version.py:_Version = collections.namedtuple(
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/typing_extensions.py:# On older versions of typing there is an internal class named "Final".
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        return the named object.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        :return: The Distribution instance (or subclass thereof) for the named
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        :raises PackageNotFoundError: When the named package's distribution
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    A prepared search for metadata on a possibly-named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the ``Distribution`` instance for the named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the metadata for the named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the version string for the named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Return a list of files for the named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    Return a list of requirements for the named package.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_vendor/importlib_metadata/_collections.py:class Pair(collections.namedtuple('Pair', 'name value')):
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/cygwinccompiler.py:    # "pyconfig.h" check -- should probably be renamed...
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        """Read and parse manifest template file named by self.template.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        named by 'self.manifest'.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        """Read the manifest file (named by 'self.manifest') and use it to
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        directory named after the distribution, containing only the files
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/bdist_rpm.py:                # The source rpm is named after the first entry in the spec file
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/install_lib.py:        files that get installed as they are named in the build tree.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/config.py:at least they're all named the same, and users always see "config" in the
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/config.py:        """Determine if the system header file named by 'header_file'
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/command/build_ext.py:        # differently named.  We convert these 2-tuples to Extension
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/archive_util.py:    The output tar file will be named 'base_dir' +  ".tar", possibly plus
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/archive_util.py:    The output zip file will be named 'base_name' + ".zip".  Uses either the
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/text_file.py:        """Open a new file named 'filename'.  This overrides both the
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:# to look for a Python module named after the command.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        # to be named 'foo' in the module 'foo' in one of the packages
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        # named here.  This list is searched from the left; an error
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        # is raised if no named package provides the command being
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        - a file in the user's home directory named .pydistutils.cfg
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        - a file named by an environment variable
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        """Return the class that implements the Distutils command named by
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        already created and run the command named by 'command', return
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py:        silently without doing anything.  If the command named by 'command'
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        # named library files) to include on any link
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        explicitly named library files or the output of "resource
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        """Preprocess a single C/C++ source file, named in 'source'.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        Output will be written to file named 'output_file', or stdout if
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * object files are named by replacing the source file extension
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * library files (shared or static) are named by plugging the
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * executables are named by appending an extension (possibly
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/sysconfig.py:    renamed_variables = ('CFLAGS', 'LDFLAGS', 'CPPFLAGS')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                elif n in renamed_variables:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                    if name.startswith('PY_') and name[3:] in renamed_variables:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                        if name.startswith('PY_') and name[3:] in renamed_variables:
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/_distutils/file_util.py:    be moved into it with the same name; otherwise, 'src' is just renamed
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/discovery.py:        If it's specified, only the named items will be included.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/dist.py:        and the named test suite will be run.  The format is the same as
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/dist.py:        or globs to use to find data files contained in the named packages.
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/dist.py:        """Add items to distribution that are named in keyword arguments
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/dist.py:        """Remove packages, modules, and extensions in named package"""
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/dist.py:        """Remove items from distribution that are named in keyword arguments
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:        raise JsonSchemaValueException("" + (name_prefix or "data") + " must be object", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='type')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                raise JsonSchemaValueException("" + (name_prefix or "data") + ".tool must be object", value=data__tool, name="" + (name_prefix or "data") + ".tool", definition={'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}, rule='type')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:            raise JsonSchemaValueException("" + (name_prefix or "data") + " must not contain "+str(data_keys)+" properties", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='additionalProperties')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:        raise JsonSchemaValueException("" + (name_prefix or "data") + " must be object", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}, rule='type')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".package-dir must be named by propertyName definition", value=data__packagedir, name="" + (name_prefix or "data") + ".package-dir", definition={'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".package-data must be named by propertyName definition", value=data__packagedata, name="" + (name_prefix or "data") + ".package-data", definition={'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".exclude-package-data must be named by propertyName definition", value=data__excludepackagedata, name="" + (name_prefix or "data") + ".exclude-package-data", definition={'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                                raise JsonSchemaValueException("" + (name_prefix or "data") + ".dynamic.optional-dependencies must be named by propertyName definition", value=data__dynamic__optionaldependencies, name="" + (name_prefix or "data") + ".dynamic.optional-dependencies", definition={'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:            raise JsonSchemaValueException("" + (name_prefix or "data") + " must not contain "+str(data_keys)+" properties", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}, rule='additionalProperties')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".entry-points must be named by propertyName definition", value=data__entrypoints, name="" + (name_prefix or "data") + ".entry-points", definition={'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".optional-dependencies must be named by propertyName definition", value=data__optionaldependencies, name="" + (name_prefix or "data") + ".optional-dependencies", definition={'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                raise JsonSchemaValueException("" + (name_prefix or "data") + " must be named by propertyName definition", value=data, name="" + (name_prefix or "data") + "", definition={'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, rule='propertyNames')
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:    "must be named by propertyName definition": "keys must be named by",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:            "patternProperties": f"{self._jargon('properties')} named via pattern",
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:        """Check if the given path can correspond to an arbitrarily named property"""
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/config/pyprojecttoml.py:            # Probably it is just a field missing/misnamed, not worthy the verbosity...
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/package_index.py:# references, a hexadecimal numeric reference, or a named reference).
Desktop/easycab/venv/lib/python3.11/site-packages/setuptools/package_index.py:    A username/password pair. Use like a namedtuple.
Desktop/easycab/venv/lib/python3.11/site-packages/kafka_python-2.0.2.dist-info/METADATA:The consumer iterator returns ConsumerRecords, which are simple namedtuples
Desktop/easycab/venv/lib/python3.11/site-packages/pip/__pip-runner__.py:This file is named as it is, to ensure that this module can't be imported via
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    """Return an IResourceProvider for the named module or requirement"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the package's distribution contain the named metadata?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """The named metadata resource as a string"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Yield named metadata resource as list of non-blank non-comment lines
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named metadata a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Execute the named script in the supplied namespace dictionary"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the package contain the named resource?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named resource a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the named resource exist?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named resource an existing directory?"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """List the contents of the named resource directory"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        is the name it will be renamed to by the caller after this routine
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    named "Python-Eggs".
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    """Ensure that named package includes a subpath of path_item (if needed)"""
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the os-release file data source
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the lsb_release command output
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the distro release file
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the distro release file
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the os-release file data
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the lsb_release command
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the distro release file
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the uname command
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/layout.py:        """Get a named layout, or None if it doesn't exist.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/layout.py:                named_layout = child.get(name)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/layout.py:                if named_layout is not None:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/layout.py:                    return named_layout
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:_dummy_namedtuple = collections.namedtuple("_dummy_namedtuple", [])
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:def _has_default_namedtuple_repr(obj: object) -> bool:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:    """Check if an instance of namedtuple contains the default repr
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        obj (object): A namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:    default_repr_file = inspect.getfile(_dummy_namedtuple.__repr__)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:    is_namedtuple: bool = False
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:                if self.is_tuple and not self.is_namedtuple and len(self.children) == 1:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:def _is_namedtuple(obj: Any) -> bool:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:    """Checks if an object is most likely a namedtuple. It is possible
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:    to craft an object that passes this check and isn't a namedtuple, but
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        bool: True if the object is a namedtuple. False otherwise.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        # Being very defensive - if we cannot get the attr then its not a namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        elif _is_namedtuple(obj) and _has_default_namedtuple_repr(obj):
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        node.is_namedtuple = _is_namedtuple(obj)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/pretty.py:        "namedtuple": StockKeepingUnit(
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/ansi.py:        AnsiToken: A named tuple of (plain, sgr, osc)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/rich/console.py:            ConsoleDimensions: A named tuple containing the dimensions.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/msgpack/ext.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/msgpack/ext.py:class ExtType(namedtuple("ExtType", "code data")):
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:class Url(namedtuple("Url", url_attrs)):
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:    :param str url: URL to parse into a :class:`.Url` namedtuple.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:RequestHistory = namedtuple(
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:            Previously this parameter was named ``method_whitelist``, that
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/packages/six.py:        Return true, if the named module is a package.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:#: The namedtuple class used to construct keys for the connection pool.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:PoolKey = collections.namedtuple("PoolKey", _key_fields)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:ProxyConfig = collections.namedtuple("ProxyConfig", _proxy_config_fields)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:        The class to use when constructing the key. This should be a namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    :type  key_class: namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    :return: A namedtuple that can be used as a connection pool key.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    # Map the kwargs to the names in the namedtuple - this is necessary since
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    # namedtuples can't have fields starting with '_'.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:        ``pool_key`` should be a namedtuple that only contains immutable
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/_collections.py:        """Returns a list of all the values for the named field. Returns an
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/urllib3/exceptions.py:#: Renamed to ProtocolError but aliased for backwards compatibility.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/lexer.py:    #: case the rules from the state named by the string are included in the
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/cmdline.py:        'with a class named CustomLexer or CustomFormatter; you can also '
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/lexers/python.py:       This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/lexers/python.py:       This class has been renamed from ``PythonTracebackLexer``.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/formatters/__init__.py:    The file is expected to contain a Formatter class named ``formattername``
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/formatters/img.py:            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/formatters/img.py:            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/formatters/latex.py:# escapes \PYZat, \PYZlb and \PYZrb which haven't been renamed for
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/formatters/latex.py:            styles.append(rf'\@namedef{{{cp}@tok@{name}}}{{{definition}}}')
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/pygments/style.py:    name = 'unnamed'
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/resolvelib/providers.py:        A *requirement information* instance is a named tuple with two members:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/resolvelib/providers.py:        returned, and for a "named" requirement, the index(es) should be
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:RequirementInformation = collections.namedtuple(
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:State = collections.namedtuple("State", "mapping criteria backtrack_causes")
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:Result = collections.namedtuple("Result", "mapping graph criteria")
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distlib/database.py:        Looks for a named distribution on the path.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/distlib/database.py:            raise LookupError('no distribution named %r found' % name)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:# Python 3.11+ _collect_type_vars was renamed to _collect_parameters
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:        nm_tpl = collections.namedtuple(name, fields,
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:    _prohibited_namedtuple_fields = typing._prohibited
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:                    raise TypeError(f"Non-default namedtuple field {field_name} "
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:            # update from user namespace without overriding special namedtuple attributes
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:                if key in _prohibited_namedtuple_fields:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:                elif key not in _special_namedtuple_fields:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:    def _namedtuple_mro_entries(bases):
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:    @_ensure_subclassable(_namedtuple_mro_entries)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:        """Typed version of namedtuple.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:            Employee = collections.namedtuple('Employee', ['name', 'id'])
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:        the _fields attribute, which is part of the namedtuple API.)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_vendor/typing_extensions.py:        """Create named, parameterized type aliases.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/utils/deprecation.py:        # We use a specially named logger which will handle all of the
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/utils/misc.py:def enum(*sequential: Any, **named: Any) -> Type[Any]:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/utils/misc.py:    enums = dict(zip(sequential, range(len(sequential))), **named)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/operations/install/wheel.py:                    " contents should be named like: '<scheme key>/<path>'."
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/operations/install/wheel.py:                    f"should be in subdirectories named with a valid scheme "
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/locations/base.py:            # In case the current working directory has been renamed or deleted
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/pyproject.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/pyproject.py:BuildSystemDetails = namedtuple(
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/cli/main_parser.py:    # If the named file exists, use it.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/distributions/wheel.py:        assert self.req.name, "Wheels are never unnamed"
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            added. The name is used because when multiple unnamed requirements
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:        # Unnamed requirements are scanned again and the requirement won't be
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            requirement_set.add_unnamed_requirement(install_req)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            requirement_set.add_named_requirement(install_req)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:                # 'unnamed' requirements will get added here
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:                # 'unnamed' requirements can only come from being directly
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/resolver.py:                        req_set.add_named_requirement(
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/resolver.py:            req_set.add_named_requirement(ireq)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                # candidate fails to build. An unnamed URL must be user-supplied, so
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                # we fail eagerly. If the URL is named, an unsatisfiable requirement
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                assert ireq.name, "Constraint must be named"
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                'named "requirements.txt" (which cannot exist). Consider '
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/commands/__init__.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/commands/__init__.py:CommandInfo = namedtuple("CommandInfo", "module_path, class_name, summary")
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/commands/uninstall.py:                    " the uninstall command expects named"
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_set.py:        self.unnamed_requirements: List[InstallRequirement] = []
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_set.py:    def add_unnamed_requirement(self, install_req: InstallRequirement) -> None:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_set.py:        self.unnamed_requirements.append(install_req)
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_set.py:    def add_named_requirement(self, install_req: InstallRequirement) -> None:
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_set.py:        return self.unnamed_requirements + list(self.requirements.values())
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_uninstall.py:    """Returns a set containing the paths that need to be renamed.
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/constructors.py:            # will become an 'unnamed' requirement
Desktop/easycab/venv/lib/python3.11/site-packages/pip/_internal/req/req_install.py:        problem = "Unnamed requirements are not allowed as constraints"
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/fetcher.py:ConsumerRecord = collections.namedtuple("ConsumerRecord",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/consumer/fetcher.py:CompletedFetch = collections.namedtuple("CompletedFetch",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:from collections import namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:TopicPartition = namedtuple("TopicPartition",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:BrokerMetadata = namedtuple("BrokerMetadata",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:PartitionMetadata = namedtuple("PartitionMetadata",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:OffsetAndMetadata = namedtuple("OffsetAndMetadata",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:OffsetAndTimestamp = namedtuple("OffsetAndTimestamp",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:MemberInformation = namedtuple("MemberInformation",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:GroupInformation = namedtuple("GroupInformation",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/structs.py:RetryOptions = namedtuple("RetryOptions",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/vendor/selectors34.py:from collections import namedtuple, Mapping
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/vendor/selectors34.py:SelectorKey = namedtuple('SelectorKey', ['fileobj', 'fd', 'events', 'data'])
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/vendor/enum34.py:# to have members named `name` and `value`.  This works because enumeration
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/vendor/six.py:        Return true, if the named module is a package.
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py:from collections import defaultdict, namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py:ConsumerPair = namedtuple("ConsumerPair", ["src_member_id", "dst_member_id"])
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:from collections import defaultdict, namedtuple
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:ConsumerGenerationPair = namedtuple("ConsumerGenerationPair", ["consumer", "generation"])
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:StickyAssignorMemberMetadataV1 = namedtuple("StickyAssignorMemberMetadataV1",
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/coordinator/base.py:        self.rejoining = False  # renamed / complement of java needsJoinPrepare
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/metrics/stats/sensor.py:        for named_measurable in compound_stat.stats():
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/metrics/stats/sensor.py:            metric = KafkaMetric(named_measurable.name, named_measurable.stat,
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/metrics/metrics.py:    A metric is a named, numerical measurement. A sensor is a handle to
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/metrics/metrics.py:                raise ValueError('A metric named "%s" already exists, cannot'
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/admin/client.py:        # GroupCoordinatorRequest which was renamed to FindCoordinatorRequest.
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/admin/client.py:                    # This will cause the namedtuple to fail.
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/admin/client.py:            plan to change this to return namedtuples as well as decoding the
Desktop/easycab/venv/lib/python3.11/site-packages/kafka/producer/future.py:RecordMetadata = collections.namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:    """Return an IResourceProvider for the named module or requirement"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Does the package's distribution contain the named metadata?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """The named metadata resource as a string"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Yield named metadata resource as list of non-blank non-comment lines
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named metadata a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Execute the named script in the supplied namespace dictionary"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Does the package contain the named resource?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named resource a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Does the named resource exist?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """Is the named resource an existing directory?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        """List the contents of the named resource directory"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:        is the name it will be renamed to by the caller after this routine
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:    named "Python-Eggs".
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:    manifest_mod = collections.namedtuple('manifest_mod', 'manifest mtime')
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/__init__.py:    """Ensure that named package includes a subpath of path_item (if needed)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:            # Use pop() in a parse action to remove named result (note that corresponding value is not
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:        Returns named result matching the given key, or if there is no
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/results.py:        Returns the named parse results as a nested dictionary.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/__init__.py:accessed as a nested list, a dictionary, or an object with named
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = False
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = False
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = False
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``warn_multiple_tokens_in_named_alternation`` - flag to enable warnings when a results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``warn_ungrouped_named_tokens_in_collection`` - flag to enable warnings when a results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    - ``enable_debug_on_named_expressions`` - flag to auto-enable debug on all subsequent
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = 0
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = 1
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = 7
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        to add, update, or remove any named results. If the tokens are modified in place,
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        if __diag__.enable_debug_on_named_expressions:
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    from the input string and the following named results:
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    If the given regex contains named groups (defined using ``(?P<name>...)``),
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    these will be preserved as named :class:`ParseResults`.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # named fields in a regex will be returned as named results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # we keep any named results that were defined in the FollowedBy expression
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:        # access named fields as dict entries, or output as dict
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/core.py:    generating railroad diagram with named subdiagrams.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:        # clear list contents, but keep any named results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    pattern can include named results, so that the :class:`Dict` results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    can include named token fields.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:    matchExpr.suppress_warning(Diagnostics.warn_ungrouped_named_tokens_in_collection)
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/helpers.py:            # also accessible as named results
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        #: The index of the next unnamed element
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index: int = 1
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:    def generate_unnamed(self) -> int:
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        Generate a number used in the name of an otherwise unnamed diagram
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index += 1
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        return self.unnamed_index
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py:        # Skip unnamed "Empty" elements
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:        Obtain available named resources for this virtual package.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:        Obtain a File-like for a named resource.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/simple.py:    Handle to a named resource in a ResourceReader.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/importlib_resources/abc.py:        """Return True if the named 'path' is a resource.
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/jaraco/functools.py:    Return a function that will call a named method on the
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/jaraco/functools.py:    args_and_kwargs = collections.namedtuple('args_and_kwargs', 'args kwargs')
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/packaging/version.py:_Version = collections.namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:# On older versions of typing there is an internal class named "Final".
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:        nm_tpl = collections.namedtuple(name, fields,
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    _prohibited_namedtuple_fields = typing._prohibited
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                    raise TypeError(f"Non-default namedtuple field {field_name} "
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:            # update from user namespace without overriding special namedtuple attributes
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                if key in _prohibited_namedtuple_fields:
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:                elif key not in _special_namedtuple_fields and key not in nm_tpl._fields:
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    def _namedtuple_mro_entries(bases):
Desktop/easycab/venv/lib64/python3.11/site-packages/pkg_resources/_vendor/typing_extensions.py:    NamedTuple.__mro_entries__ = _namedtuple_mro_entries
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/command/editable_wheel.py:New or renamed files may not be automatically picked up without a new installation.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/command/sdist.py:        """Read the manifest file (named by 'self.manifest') and use it to
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/command/egg_info.py:        named by 'self.manifest'.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/command/build.py:    For example, if a distribution wants to provide a Python module named ``pkg.mod``,
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/command/bdist_egg.py:    zip file will be named 'base_dir' + ".zip".  Uses either the "zipfile"
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:            # Use pop() in a parse action to remove named result (note that corresponding value is not
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:        Returns named result matching the given key, or if there is no
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/results.py:        Returns the named parse results as a nested dictionary.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/__init__.py:accessed as a nested list, a dictionary, or an object with named
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = False
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = False
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = False
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``warn_multiple_tokens_in_named_alternation`` - flag to enable warnings when a results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``warn_ungrouped_named_tokens_in_collection`` - flag to enable warnings when a results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    - ``enable_debug_on_named_expressions`` - flag to auto-enable debug on all subsequent
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_multiple_tokens_in_named_alternation = 0
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    warn_ungrouped_named_tokens_in_collection = 1
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    enable_debug_on_named_expressions = 7
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        to add, update, or remove any named results. If the tokens are modified in place,
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        if __diag__.enable_debug_on_named_expressions:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    from the input string and the following named results:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    If the given regex contains named groups (defined using ``(?P<name>...)``),
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    these will be preserved as named :class:`ParseResults`.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # named fields in a regex will be returned as named results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                and Diagnostics.warn_multiple_tokens_in_named_alternation
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                        "warn_multiple_tokens_in_named_alternation",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # we keep any named results that were defined in the FollowedBy expression
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            __diag__.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:            and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                    and Diagnostics.warn_ungrouped_named_tokens_in_collection
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:                            "warn_ungrouped_named_tokens_in_collection",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:        # access named fields as dict entries, or output as dict
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/core.py:    generating railroad diagram with named subdiagrams.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:        # clear list contents, but keep any named results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    pattern can include named results, so that the :class:`Dict` results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    can include named token fields.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:    matchExpr.suppress_warning(Diagnostics.warn_ungrouped_named_tokens_in_collection)
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/helpers.py:            # also accessible as named results
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        #: The index of the next unnamed element
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index: int = 1
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:    def generate_unnamed(self) -> int:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        Generate a number used in the name of an otherwise unnamed diagram
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        self.unnamed_index += 1
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        return self.unnamed_index
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py:        # Skip unnamed "Empty" elements
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:        Obtain available named resources for this virtual package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:        Obtain a File-like for a named resource.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_resources/simple.py:    Handle to a named resource in a ResourceReader.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_resources/abc.py:        """Return True if the named 'path' is a resource.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/jaraco/functools.py:    Return a function that will call a named method on the
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/jaraco/functools.py:    args_and_kwargs = collections.namedtuple('args_and_kwargs', 'args kwargs')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/packaging/version.py:_Version = collections.namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/typing_extensions.py:# On older versions of typing there is an internal class named "Final".
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        return the named object.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        :return: The Distribution instance (or subclass thereof) for the named
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:        :raises PackageNotFoundError: When the named package's distribution
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    A prepared search for metadata on a possibly-named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the ``Distribution`` instance for the named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the metadata for the named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Get the version string for the named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    """Return a list of files for the named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/__init__.py:    Return a list of requirements for the named package.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_vendor/importlib_metadata/_collections.py:class Pair(collections.namedtuple('Pair', 'name value')):
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/cygwinccompiler.py:    # "pyconfig.h" check -- should probably be renamed...
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        """Read and parse manifest template file named by self.template.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        named by 'self.manifest'.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        """Read the manifest file (named by 'self.manifest') and use it to
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/sdist.py:        directory named after the distribution, containing only the files
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/bdist_rpm.py:                # The source rpm is named after the first entry in the spec file
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/install_lib.py:        files that get installed as they are named in the build tree.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/config.py:at least they're all named the same, and users always see "config" in the
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/config.py:        """Determine if the system header file named by 'header_file'
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/command/build_ext.py:        # differently named.  We convert these 2-tuples to Extension
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/archive_util.py:    The output tar file will be named 'base_dir' +  ".tar", possibly plus
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/archive_util.py:    The output zip file will be named 'base_name' + ".zip".  Uses either the
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/text_file.py:        """Open a new file named 'filename'.  This overrides both the
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:# to look for a Python module named after the command.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        # to be named 'foo' in the module 'foo' in one of the packages
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        # named here.  This list is searched from the left; an error
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        # is raised if no named package provides the command being
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        - a file in the user's home directory named .pydistutils.cfg
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        - a file named by an environment variable
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        """Return the class that implements the Distutils command named by
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        already created and run the command named by 'command', return
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/dist.py:        silently without doing anything.  If the command named by 'command'
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        # named library files) to include on any link
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        explicitly named library files or the output of "resource
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        """Preprocess a single C/C++ source file, named in 'source'.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:        Output will be written to file named 'output_file', or stdout if
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * object files are named by replacing the source file extension
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * library files (shared or static) are named by plugging the
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/ccompiler.py:    #   * executables are named by appending an extension (possibly
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/sysconfig.py:    renamed_variables = ('CFLAGS', 'LDFLAGS', 'CPPFLAGS')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                elif n in renamed_variables:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                    if name.startswith('PY_') and name[3:] in renamed_variables:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/sysconfig.py:                        if name.startswith('PY_') and name[3:] in renamed_variables:
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/_distutils/file_util.py:    be moved into it with the same name; otherwise, 'src' is just renamed
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/discovery.py:        If it's specified, only the named items will be included.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/dist.py:        and the named test suite will be run.  The format is the same as
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/dist.py:        or globs to use to find data files contained in the named packages.
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/dist.py:        """Add items to distribution that are named in keyword arguments
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/dist.py:        """Remove packages, modules, and extensions in named package"""
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/dist.py:        """Remove items from distribution that are named in keyword arguments
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:        raise JsonSchemaValueException("" + (name_prefix or "data") + " must be object", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='type')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                raise JsonSchemaValueException("" + (name_prefix or "data") + ".tool must be object", value=data__tool, name="" + (name_prefix or "data") + ".tool", definition={'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}, rule='type')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:            raise JsonSchemaValueException("" + (name_prefix or "data") + " must not contain "+str(data_keys)+" properties", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', "with meaning similar to the one defined in `core metadata's Description", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'authors' of the project.", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': ["The people or organizations considered to be the 'maintainers' of the project.", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as "Required", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='additionalProperties')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:        raise JsonSchemaValueException("" + (name_prefix or "data") + " must be object", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}, rule='type')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".package-dir must be named by propertyName definition", value=data__packagedir, name="" + (name_prefix or "data") + ".package-dir", definition={'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".package-data must be named by propertyName definition", value=data__packagedata, name="" + (name_prefix or "data") + ".package-data", definition={'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".exclude-package-data must be named by propertyName definition", value=data__excludepackagedata, name="" + (name_prefix or "data") + ".exclude-package-data", definition={'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                                raise JsonSchemaValueException("" + (name_prefix or "data") + ".dynamic.optional-dependencies must be named by propertyName definition", value=data__dynamic__optionaldependencies, name="" + (name_prefix or "data") + ".dynamic.optional-dependencies", definition={'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:            raise JsonSchemaValueException("" + (name_prefix or "data") + " must not contain "+str(data_keys)+" properties", value=data, name="" + (name_prefix or "data") + "", definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *"thought experiment"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', "Please notice this don't work with wheels. See `data files support", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., "dotted" form with module), e.g.::\n\n', '    cmdclass = {mycmd = "pkg.subpkg.module.CommandClass"}\n\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'python-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': "'file:' directive", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': "'attr:' directive", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': "'find:' directive", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', "Can container shell-style wildcards (e.g. ``'pkg.*'``)"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}, rule='additionalProperties')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".entry-points must be named by propertyName definition", value=data__entrypoints, name="" + (name_prefix or "data") + ".entry-points", definition={'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                        raise JsonSchemaValueException("" + (name_prefix or "data") + ".optional-dependencies must be named by propertyName definition", value=data__optionaldependencies, name="" + (name_prefix or "data") + ".optional-dependencies", definition={'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py:                raise JsonSchemaValueException("" + (name_prefix or "data") + " must be named by propertyName definition", value=data, name="" + (name_prefix or "data") + "", definition={'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, rule='propertyNames')
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:    "must be named by propertyName definition": "keys must be named by",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:            "patternProperties": f"{self._jargon('properties')} named via pattern",
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py:        """Check if the given path can correspond to an arbitrarily named property"""
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/config/pyprojecttoml.py:            # Probably it is just a field missing/misnamed, not worthy the verbosity...
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/package_index.py:# references, a hexadecimal numeric reference, or a named reference).
Desktop/easycab/venv/lib64/python3.11/site-packages/setuptools/package_index.py:    A username/password pair. Use like a namedtuple.
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka_python-2.0.2.dist-info/METADATA:The consumer iterator returns ConsumerRecords, which are simple namedtuples
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/__pip-runner__.py:This file is named as it is, to ensure that this module can't be imported via
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    """Return an IResourceProvider for the named module or requirement"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the package's distribution contain the named metadata?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """The named metadata resource as a string"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Yield named metadata resource as list of non-blank non-comment lines
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named metadata a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Execute the named script in the supplied namespace dictionary"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the package contain the named resource?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named resource a directory?  (like ``os.path.isdir()``)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Does the named resource exist?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """Is the named resource an existing directory?"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        """List the contents of the named resource directory"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:        is the name it will be renamed to by the caller after this routine
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    named "Python-Eggs".
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pkg_resources/__init__.py:    """Ensure that named package includes a subpath of path_item (if needed)"""
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the os-release file data source
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the lsb_release command output
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the distro release file
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:    Return a single named information item from the distro release file
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the os-release file data
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the lsb_release command
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the distro release file
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distro/distro.py:        Return a single named information item from the uname command
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/layout.py:        """Get a named layout, or None if it doesn't exist.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/layout.py:                named_layout = child.get(name)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/layout.py:                if named_layout is not None:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/layout.py:                    return named_layout
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:_dummy_namedtuple = collections.namedtuple("_dummy_namedtuple", [])
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:def _has_default_namedtuple_repr(obj: object) -> bool:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:    """Check if an instance of namedtuple contains the default repr
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        obj (object): A namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:    default_repr_file = inspect.getfile(_dummy_namedtuple.__repr__)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:    is_namedtuple: bool = False
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:                if self.is_tuple and not self.is_namedtuple and len(self.children) == 1:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:def _is_namedtuple(obj: Any) -> bool:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:    """Checks if an object is most likely a namedtuple. It is possible
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:    to craft an object that passes this check and isn't a namedtuple, but
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        bool: True if the object is a namedtuple. False otherwise.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        # Being very defensive - if we cannot get the attr then its not a namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        elif _is_namedtuple(obj) and _has_default_namedtuple_repr(obj):
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        node.is_namedtuple = _is_namedtuple(obj)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/pretty.py:        "namedtuple": StockKeepingUnit(
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/ansi.py:        AnsiToken: A named tuple of (plain, sgr, osc)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/rich/console.py:            ConsoleDimensions: A named tuple containing the dimensions.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/msgpack/ext.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/msgpack/ext.py:class ExtType(namedtuple("ExtType", "code data")):
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:class Url(namedtuple("Url", url_attrs)):
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/url.py:    :param str url: URL to parse into a :class:`.Url` namedtuple.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:RequestHistory = namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/util/retry.py:            Previously this parameter was named ``method_whitelist``, that
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/packages/six.py:        Return true, if the named module is a package.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:#: The namedtuple class used to construct keys for the connection pool.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:PoolKey = collections.namedtuple("PoolKey", _key_fields)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:ProxyConfig = collections.namedtuple("ProxyConfig", _proxy_config_fields)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:        The class to use when constructing the key. This should be a namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    :type  key_class: namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    :return: A namedtuple that can be used as a connection pool key.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    # Map the kwargs to the names in the namedtuple - this is necessary since
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:    # namedtuples can't have fields starting with '_'.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/poolmanager.py:        ``pool_key`` should be a namedtuple that only contains immutable
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/_collections.py:        """Returns a list of all the values for the named field. Returns an
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/exceptions.py:#: Renamed to ProtocolError but aliased for backwards compatibility.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/lexer.py:    #: case the rules from the state named by the string are included in the
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/cmdline.py:        'with a class named CustomLexer or CustomFormatter; you can also '
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/lexers/python.py:       This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/lexers/python.py:       This class has been renamed from ``PythonTracebackLexer``.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/formatters/__init__.py:    The file is expected to contain a Formatter class named ``formattername``
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/formatters/img.py:            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/formatters/img.py:            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/formatters/latex.py:# escapes \PYZat, \PYZlb and \PYZrb which haven't been renamed for
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/formatters/latex.py:            styles.append(rf'\@namedef{{{cp}@tok@{name}}}{{{definition}}}')
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/pygments/style.py:    name = 'unnamed'
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/resolvelib/providers.py:        A *requirement information* instance is a named tuple with two members:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/resolvelib/providers.py:        returned, and for a "named" requirement, the index(es) should be
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:RequirementInformation = collections.namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:State = collections.namedtuple("State", "mapping criteria backtrack_causes")
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/resolvelib/resolvers.py:Result = collections.namedtuple("Result", "mapping graph criteria")
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distlib/database.py:        Looks for a named distribution on the path.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/distlib/database.py:            raise LookupError('no distribution named %r found' % name)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:# Python 3.11+ _collect_type_vars was renamed to _collect_parameters
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:        nm_tpl = collections.namedtuple(name, fields,
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:    _prohibited_namedtuple_fields = typing._prohibited
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:                    raise TypeError(f"Non-default namedtuple field {field_name} "
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:            # update from user namespace without overriding special namedtuple attributes
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:                if key in _prohibited_namedtuple_fields:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:                elif key not in _special_namedtuple_fields:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:    def _namedtuple_mro_entries(bases):
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:    @_ensure_subclassable(_namedtuple_mro_entries)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:        """Typed version of namedtuple.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:            Employee = collections.namedtuple('Employee', ['name', 'id'])
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:        the _fields attribute, which is part of the namedtuple API.)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_vendor/typing_extensions.py:        """Create named, parameterized type aliases.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/utils/deprecation.py:        # We use a specially named logger which will handle all of the
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/utils/misc.py:def enum(*sequential: Any, **named: Any) -> Type[Any]:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/utils/misc.py:    enums = dict(zip(sequential, range(len(sequential))), **named)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/operations/install/wheel.py:                    " contents should be named like: '<scheme key>/<path>'."
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/operations/install/wheel.py:                    f"should be in subdirectories named with a valid scheme "
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/locations/base.py:            # In case the current working directory has been renamed or deleted
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/pyproject.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/pyproject.py:BuildSystemDetails = namedtuple(
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/cli/main_parser.py:    # If the named file exists, use it.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/distributions/wheel.py:        assert self.req.name, "Wheels are never unnamed"
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            added. The name is used because when multiple unnamed requirements
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:        # Unnamed requirements are scanned again and the requirement won't be
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            requirement_set.add_unnamed_requirement(install_req)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:            requirement_set.add_named_requirement(install_req)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:                # 'unnamed' requirements will get added here
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/legacy/resolver.py:                # 'unnamed' requirements can only come from being directly
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/resolver.py:                        req_set.add_named_requirement(
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/resolver.py:            req_set.add_named_requirement(ireq)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                # candidate fails to build. An unnamed URL must be user-supplied, so
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                # we fail eagerly. If the URL is named, an unsatisfiable requirement
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                assert ireq.name, "Constraint must be named"
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/resolution/resolvelib/factory.py:                'named "requirements.txt" (which cannot exist). Consider '
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/commands/__init__.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/commands/__init__.py:CommandInfo = namedtuple("CommandInfo", "module_path, class_name, summary")
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/commands/uninstall.py:                    " the uninstall command expects named"
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_set.py:        self.unnamed_requirements: List[InstallRequirement] = []
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_set.py:    def add_unnamed_requirement(self, install_req: InstallRequirement) -> None:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_set.py:        self.unnamed_requirements.append(install_req)
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_set.py:    def add_named_requirement(self, install_req: InstallRequirement) -> None:
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_set.py:        return self.unnamed_requirements + list(self.requirements.values())
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_uninstall.py:    """Returns a set containing the paths that need to be renamed.
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/constructors.py:            # will become an 'unnamed' requirement
Desktop/easycab/venv/lib64/python3.11/site-packages/pip/_internal/req/req_install.py:        problem = "Unnamed requirements are not allowed as constraints"
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partition must be a TopicPartition namedtuple')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/group.py:            raise TypeError('partitions must be TopicPartition namedtuples')
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/fetcher.py:ConsumerRecord = collections.namedtuple("ConsumerRecord",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/consumer/fetcher.py:CompletedFetch = collections.namedtuple("CompletedFetch",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:from collections import namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:TopicPartition = namedtuple("TopicPartition",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:BrokerMetadata = namedtuple("BrokerMetadata",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:PartitionMetadata = namedtuple("PartitionMetadata",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:OffsetAndMetadata = namedtuple("OffsetAndMetadata",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:OffsetAndTimestamp = namedtuple("OffsetAndTimestamp",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:MemberInformation = namedtuple("MemberInformation",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:GroupInformation = namedtuple("GroupInformation",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/structs.py:RetryOptions = namedtuple("RetryOptions",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/vendor/selectors34.py:from collections import namedtuple, Mapping
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/vendor/selectors34.py:SelectorKey = namedtuple('SelectorKey', ['fileobj', 'fd', 'events', 'data'])
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/vendor/enum34.py:# to have members named `name` and `value`.  This works because enumeration
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/vendor/six.py:        Return true, if the named module is a package.
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py:from collections import defaultdict, namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py:ConsumerPair = namedtuple("ConsumerPair", ["src_member_id", "dst_member_id"])
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:from collections import defaultdict, namedtuple
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:ConsumerGenerationPair = namedtuple("ConsumerGenerationPair", ["consumer", "generation"])
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py:StickyAssignorMemberMetadataV1 = namedtuple("StickyAssignorMemberMetadataV1",
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/coordinator/base.py:        self.rejoining = False  # renamed / complement of java needsJoinPrepare
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/metrics/stats/sensor.py:        for named_measurable in compound_stat.stats():
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/metrics/stats/sensor.py:            metric = KafkaMetric(named_measurable.name, named_measurable.stat,
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/metrics/metrics.py:    A metric is a named, numerical measurement. A sensor is a handle to
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/metrics/metrics.py:                raise ValueError('A metric named "%s" already exists, cannot'
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/admin/client.py:        # GroupCoordinatorRequest which was renamed to FindCoordinatorRequest.
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/admin/client.py:                    # This will cause the namedtuple to fail.
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/admin/client.py:            plan to change this to return namedtuples as well as decoding the
Desktop/easycab/venv/lib64/python3.11/site-packages/kafka/producer/future.py:RecordMetadata = collections.namedtuple(
Desktop/easycab/venv/bin/activate.fish:    # With the original prompt function renamed, we can override with our own.
Desktop/easycab/.git/description:Unnamed repository; edit this file 'description' to name the repository.
Desktop/easycab/.git/hooks/update.sample:"Unnamed repository"* | "")
Desktop/easycab/.git/hooks/pre-push.sample:# If pushing without using a named remote those arguments will be equal.
memoria/linux/nfs_samba/smb.conf:# Only bind to the named interfaces and/or networks; you must use the
memoria/linux/dns/historylinux.txt:  309  sudo nano /etc/bind/named.conf.local
memoria/linux/dns/historylinux.txt:  314  sudo nano /etc/bind/named.conf.options 
memoria/linux/dns/historylinux.txt:  320  sudo nano /etc/bind/named.conf.local
memoria/linux/dns/historylinux.txt:  326  sudo nano /etc/bind/named.conf.options
memoria/linux/dns/historylinux.txt:  329  sudo named-checkconf
memoria/linux/dns/historylinux.txt:  330  sudo named-checkzone asir.local /etc/bind/zones/db.asir.local
